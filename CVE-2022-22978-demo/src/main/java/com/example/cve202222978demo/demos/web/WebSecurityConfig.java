package com.example.cve202222978demo.demos.web;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.firewall.StrictHttpFirewall;

/**
 * @author zhiyang
 */

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                //匹配所有请求
                .authorizeRequests()
                .regexMatchers("/.*")
                .authenticated().and()
                .formLogin().and()
                .httpBasic();
    }

    @Override
    public void configure(WebSecurity web) throws Exception {
        StrictHttpFirewall strictHttpFirewall = new StrictHttpFirewall();
        //设置允许双斜线，解决报错：The request was rejected because the URL contained a potentially malicious String "//"
        strictHttpFirewall.setAllowUrlEncodedDoubleSlash(true);
        web.httpFirewall(strictHttpFirewall);
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth
                .inMemoryAuthentication()
                .withUser("admin")
                .password("{noop}admin123")
                .roles("ADMIN")
                .and()
                .withUser("user")
                .password("{noop}user123")
                .roles("USER");
    }
}
